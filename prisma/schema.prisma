// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid()) @db.Uuid
  email        String         @unique
  passwordHash String         @map("password_hash")
  fullName     String?        @map("full_name")
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime       @default(now()) @map("updated_at") @db.Timestamptz
  lastLogin    DateTime?      @map("last_login") @db.Timestamptz
  stores       Store[]
  subscriptions Subscription[]
  apiKeys      ApiKey[]
  aiConfigs    AiConfig[]
  aiTriggers   AiTrigger[]

  @@map("users")
}

model Store {
  id                  String                @id @map("id") @db.VarChar(100)
  userId              String                @map("user_id") @db.Uuid
  name                String
  description         String?
  logoUrl             String?               @map("logo_url")
  aiEnabled           Boolean               @default(false) @map("ai_enabled")
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime              @default(now()) @map("updated_at") @db.Timestamptz
  user                User                  @relation(fields: [userId], references: [id])
  products            Product[]
  deliveryTemplates   DeliveryTemplate[]
  productDeliveryConfigs ProductDeliveryConfig[]
  aiTriggerConfigs    AiTriggerConfig[]
  faqDocuments        FaqDocument[]
  responseTemplates   ResponseTemplate[]
  customers           Customer[]
  orders              Order[]
  autoDeliveries      AutoDelivery[]
  messages            Message[]
  chatMessages        ChatMessage[]
  channelIntegrations ChannelIntegration[]
  systemLogs          SystemLog[]

  @@map("stores")
}

model SubscriptionPlan {
  id           String         @id @default(uuid()) @db.Uuid
  name         String
  priceMonthly Decimal        @map("price_monthly") @db.Decimal(12, 2)
  priceYearly  Decimal        @map("price_yearly") @db.Decimal(12, 2)
  features     Json
  isActive     Boolean        @default(true) @map("is_active")
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime       @default(now()) @map("updated_at") @db.Timestamptz
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id               String           @id @default(uuid()) @db.Uuid
  userId           String           @map("user_id") @db.Uuid
  planId           String           @map("plan_id") @db.Uuid
  billingCycle     String           @map("billing_cycle")
  status           String
  startedAt        DateTime         @default(now()) @map("started_at") @db.Timestamptz
  expiresAt        DateTime         @map("expires_at") @db.Timestamptz
  paymentReference String?          @map("payment_reference")
  createdAt        DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime         @default(now()) @map("updated_at") @db.Timestamptz
  user             User             @relation(fields: [userId], references: [id])
  plan             SubscriptionPlan @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

model DeliveryTemplate {
  id                  String                @id @default(uuid()) @db.Uuid
  storeId             String                @map("store_id") @db.VarChar(100)
  name                String
  content             String
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime              @default(now()) @map("updated_at") @db.Timestamptz
  store               Store                 @relation(fields: [storeId], references: [id])
  productDeliveryConfigs ProductDeliveryConfig[]

  @@map("delivery_templates")
}

model Product {
  id                String             @id @map("id") @db.VarChar(100)
  storeId           String             @map("store_id") @db.VarChar(100)
  name              String
  description       String?
  useAi             Boolean            @default(false) @map("use_ai")
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime           @default(now()) @map("updated_at") @db.Timestamptz
  store             Store              @relation(fields: [storeId], references: [id])
  variants          ProductVariant[]

  @@unique([storeId, id])
  @@map("products")
}

model ProductVariant {
  variantId   String   @id @map("variant_id") @db.VarChar(100)
  productId   String   @map("product_id") @db.VarChar(100)
  name        String
  price       Decimal  @db.Decimal(12, 2)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz
  product     Product  @relation(fields: [productId], references: [id])

  @@unique([productId, variantId])
  @@map("product_variants")
}

model ProductDeliveryConfig {
  id          String            @id @default(uuid()) @db.Uuid
  storeId     String            @map("store_id") @db.VarChar(100)
  productId   String?           @map("product_id") @db.VarChar(100)
  variantId   String?           @map("variant_id") @db.VarChar(100)
  type        String
  status      String            @default("active")
  accountData String?           @map("account_data")
  templateId  String?           @map("template_id") @db.Uuid
  createdAt   DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime          @default(now()) @map("updated_at") @db.Timestamptz
  store       Store             @relation(fields: [storeId], references: [id])
  template    DeliveryTemplate? @relation(fields: [templateId], references: [id])

  @@map("product_delivery_config")
}

model AiTriggerConfig {
  id         String   @id @default(uuid()) @db.Uuid
  storeId    String   @map("store_id") @db.VarChar(100)
  name       String
  keywords   String[] @db.Text
  isActive   Boolean  @default(true) @map("is_active")
  apiConfig  Json?    @map("api_config")
  aiConfigId String?  @map("ai_config_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamptz
  store      Store    @relation(fields: [storeId], references: [id])
  aiConfig   AiConfig? @relation(fields: [aiConfigId], references: [id])

  @@map("ai_trigger_config")
}

model AiConfig {
  id            String           @id @default(uuid()) @db.Uuid
  userId        String           @map("user_id") @db.Uuid
  systemPrompt  String           @map("system_prompt")
  customPrompts Json             @map("custom_prompts")
  createdAt     DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime         @default(now()) @map("updated_at") @db.Timestamptz
  user          User             @relation(fields: [userId], references: [id])
  aiTriggers    AiTriggerConfig[]

  @@map("ai_config")
}

model Question {
  id         String         @id @default(uuid()) @db.Uuid
  question   String?
  answer     String?
  category   String?        @default("150")
  tag        String[]      @default([]) @db.Text
  faqDocuments FaqDocument[]

  @@map("question")
}

model FaqDocument {
  id         String   @id @default(uuid()) @db.Uuid
  storeId    String   @map("store_id") @db.VarChar(100)
  questionId String   @map("question_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamptz
  store      Store    @relation(fields: [storeId], references: [id])
  question   Question @relation(fields: [questionId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("faq_documents")
}

model ResponseTemplate {
  id        String   @id @default(uuid()) @db.Uuid
  storeId   String   @map("store_id") @db.VarChar(100)
  name      String
  content   String
  category  String   @default("general")
  variables String[] @db.Text
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz
  store     Store    @relation(fields: [storeId], references: [id])

  @@unique([storeId, name])
  @@map("response_templates")
}

model ChatMessage {
  id         String    @id @default(uuid()) @db.Uuid
  storeId    String    @map("store_id") @db.VarChar(100)
  customerId String?   @map("customer_id") @db.Uuid
  sessionId  String    @map("session_id")
  role       String
  content    String
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz
  store      Store     @relation(fields: [storeId], references: [id])
  customer   Customer? @relation(fields: [customerId], references: [id])

  @@map("chat_messages")
}

model Customer {
  id          String         @id @default(uuid()) @db.Uuid
  storeId     String         @map("store_id") @db.VarChar(100)
  contactId   String         @map("contact_id")
  contactType String         @map("contact_type")
  name        String?
  createdAt   DateTime       @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime       @default(now()) @map("updated_at") @db.Timestamptz
  store       Store          @relation(fields: [storeId], references: [id])
  orders      Order[]
  autoDeliveries AutoDelivery[]
  messages    Message[]
  chatMessages ChatMessage[]

  @@unique([storeId, contactId, contactType])
  @@map("customers")
}

model Order {
  id             String      @id @default(uuid()) @db.Uuid
  storeId        String      @map("store_id") @db.VarChar(100)
  customerId     String      @map("customer_id") @db.Uuid
  orderReference String?     @map("order_reference")
  totalAmount    Decimal     @map("total_amount") @db.Decimal(12, 2)
  status         String      @default("pending")
  createdAt      DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime    @default(now()) @map("updated_at") @db.Timestamptz
  store          Store       @relation(fields: [storeId], references: [id])
  customer       Customer    @relation(fields: [customerId], references: [id])
  items          OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String        @id @default(uuid()) @db.Uuid
  orderId     String        @map("order_id") @db.Uuid
  productId   String        @map("product_id") @db.VarChar(100)
  variantId   String?       @map("variant_id") @db.VarChar(100)
  quantity    Int           @default(1)
  unitPrice   Decimal       @map("unit_price") @db.Decimal(12, 2)
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz
  order       Order         @relation(fields: [orderId], references: [id])
  autoDeliveries AutoDelivery[]

  @@map("order_items")
}

model AutoDelivery {
  id             String    @id @default(uuid()) @db.Uuid
  storeId        String    @map("store_id") @db.VarChar(100)
  orderItemId    String    @map("order_item_id") @db.Uuid
  customerId     String    @map("customer_id") @db.Uuid
  productId      String    @map("product_id") @db.VarChar(100)
  variantId      String?   @map("variant_id") @db.VarChar(100)
  deliveryMessage String   @map("delivery_message")
  status         String    @default("pending")
  errorMessage   String?   @map("error_message")
  sentAt         DateTime? @map("sent_at") @db.Timestamptz
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz
  store          Store     @relation(fields: [storeId], references: [id])
  orderItem      OrderItem @relation(fields: [orderItemId], references: [id])
  customer       Customer  @relation(fields: [customerId], references: [id])
  messages       Message[]

  @@map("auto_deliveries")
}

model Message {
  id          String        @id @default(uuid()) @db.Uuid
  storeId     String        @map("store_id") @db.VarChar(100)
  customerId  String        @map("customer_id") @db.Uuid
  direction   String
  content     String
  messageType String        @default("regular") @map("message_type")
  aiResponse  Boolean       @default(false) @map("ai_response")
  deliveryId  String?       @map("delivery_id") @db.Uuid
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz
  store       Store         @relation(fields: [storeId], references: [id])
  customer    Customer      @relation(fields: [customerId], references: [id])
  delivery    AutoDelivery? @relation(fields: [deliveryId], references: [id])

  @@map("messages")
}

model ChannelIntegration {
  id          String   @id @default(uuid()) @db.Uuid
  storeId     String   @map("store_id") @db.VarChar(100)
  channelType String   @map("channel_type")
  credentials Json
  webhookUrl  String?  @map("webhook_url")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz
  store       Store    @relation(fields: [storeId], references: [id])

  @@unique([storeId, channelType])
  @@map("channel_integration")
}

model ApiKey {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  keyName     String    @map("key_name")
  apiKeyHash  String    @map("api_key_hash")
  isActive    Boolean   @default(true) @map("is_active")
  permissions Json?
  lastUsedAt  DateTime? @map("last_used_at") @db.Timestamptz
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  expiresAt   DateTime? @map("expires_at") @db.Timestamptz
  user        User      @relation(fields: [userId], references: [id])

  @@map("api_keys")
}

model SystemLog {
  id          String   @id @default(uuid()) @db.Uuid
  storeId     String   @map("store_id") @db.VarChar(100)
  logType     String   @map("log_type")
  description String?
  referenceId String?  @map("reference_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  store       Store    @relation(fields: [storeId], references: [id])

  @@map("system_logs")
}

model AiTrigger {
  id       BigInt   @id @default(autoincrement())
  userId   String   @map("user_id") @db.Uuid
  intent   String?  @map("Intent") @default("") @db.VarChar
  keywords String[] @map("Keywords") @db.Text
  template String   @map("Template") @db.Text
  user     User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("ai_trigger")
}
